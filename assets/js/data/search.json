[ { "title": "[VoiScale User Data Visualization] JavaScript, HTML and AWS Lambda code example", "url": "/posts/JavaScript-visualization/", "categories": "Side Projects, Smart Food Scale", "tags": "Dynamodb, Smart Kitchen, JavaScript, VoiScale", "date": "2023-02-07 17:00:00 +0100", "snippet": "Create User-friendly Interface with Chart.js Tutorial from W3 SchoolsCode example of pie chart:&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;scriptsrc=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js\"&gt;&lt;/script&gt;&lt;canvas id=\"myChart\" style=\"width:100%;max-width:500px\"&gt;&lt;/canvas&gt;&lt;script&gt;var xValues = [\"Calories\", \"Protein\", \"Fat\", \"Carbohydrate\", \"Fiber\"];var yValues = [55, 49, 44, 24, 15];var barColors = [ \"#FFCEFE\", \"#FFFFD0\", \"#FF7B54\", \"#86C8BC\", \"#C0DEFF\"];new Chart(\"myChart\", { type: \"pie\", data: { labels: xValues, datasets: [{ backgroundColor: barColors, data: yValues }] }, options: { title: { display: true, text: \"Your Food Nutrition Facts\" } }});&lt;/script&gt;&lt;/html&gt; Example of Node.js setup a webserver, request DynamoDB dataindex.jsconst http = require('https');const http_test = require('http'); const host = 'localhost';const port = 8000;function httpGet() { return new Promise(((resolve, reject) =&gt; { var options = { hostname: 'your_endpoint.execute-api.eu-central-1.amazonaws.com', path: '/items', method: 'GET' }; const request = http.request(options, (response) =&gt; { response.setEncoding('utf8'); let returnData = ''; response.on('data', (chunk) =&gt; { returnData += chunk; }); response.on('end', () =&gt; { resolve(JSON.parse(returnData)); }); response.on('error', (error) =&gt; { reject(error); }); }); request.end(); })); } var scale_response = async function getVoiScale() { const response = await httpGet(); console.log(response);}const requestListener = function (req, res) { scale_response(); res.writeHead(200); res.end(\"My first server!\");};const server = http_test.createServer(requestListener);server.listen(port, host, () =&gt; { console.log(`Server is running on http://${host}:${port}`);});Example of side-by-side chart displaystyles.css*{ margin: 0; padding: 0; font-family: sans-serif;}.charMenu { width: 100vw; height: 40px; background: #60b5b2; color: rgb(242, 14, 14);}.chartMenu p { padding: 10px; font-size: 20px;}.chartCard { width: 100vw; height: calc(100vh - 40px); background: rgba(103, 182, 179, 0.2); display: flex; align-items: center; justify-content: center;}.chartBox { width: 300px; padding: 20px; border-radius: 20px; margin: 20px; background: rgb(168, 217, 180);}index.html&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"utf-8\"&gt;&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;&lt;! -- this is for pie chart --&gt;&lt;/head&gt;&lt;body&gt;\t&lt;div class=\"charMenu\"&gt;\t\t&lt;p style=\"text-align:center;line-height:35px;font-family:verdana\"&gt;VoiScale - We care about your heath!&lt;/p&gt;\t&lt;/div&gt;\t&lt;div class=\"chartCard\"&gt;\t\t&lt;div class=\"chartBox\"&gt;\t\t\t&lt;canvas id=\"myChart\"&gt;&lt;/canvas&gt;\t\t&lt;/div&gt;\t\t\t\t&lt;div class=\"chartBox\"&gt;\t\t\t&lt;canvas id=\"hisChart\"&gt;&lt;/canvas&gt;\t\t&lt;/div&gt;\t&lt;/div&gt; \t&lt;script src=\"https://cdn.jsdelivr.net/npm/chart.js\"&gt;&lt;/script&gt; \t&lt;script&gt;\t\tconst ctx = document.getElementById('myChart');\t\t\tvar xValues = [\"Calories\", \"Protein\", \"Fat\", \"Carbohydrate\", \"Fiber\"];\t\tvar yValues = [55, 49, 44, 24, 15];\t\tvar barColors = [\t\t\t\"#FFCEFE\",\t\t\t\"#FFFFD0\",\t\t\t\"#FF7B54\",\t\t\t\"#86C8BC\",\t\t\t\"#C0DEFF\"\t\t];\t\tnew Chart(\"myChart\", {\t\t\ttype: \"pie\",\t\t\tdata: {\t\t\t\tlabels: xValues,\t\t\t\tdatasets: [{\t\t\t\t\tbackgroundColor: barColors,\t\t\t\t\tdata: yValues\t\t\t\t}]\t\t\t},\t\t\toptions: {\t\t\t\ttitle: {\t\t\t\t\tdisplay: true,\t\t\t\t\ttext: \"Your Food Nutrition Facts\"\t\t\t\t}\t\t\t}\t\t}); \t&lt;/script&gt; &lt;script&gt;\t\tconst cty = document.getElementById('yourChart');\t\tnew Chart(cty, {\t\t\ttype: 'bar',\t\t\tdata: {\t\t\t\tlabels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\t\t\t\tdatasets: [{\t\t\t\t\tlabel: '# of Votes',\t\t\t\t\tdata: [12, 19, 3, 5, 2, 3],\t\t\t\t\tborderWidth: 1\t\t\t\t}]\t\t\t},\t\t\toptions: {\t\t\t\taspectRatio: 1,\t\t\t\tscales: {\t\t\t\t\ty: {\t\t\t\t\t\tbeginAtZero: true\t\t\t\t\t}\t\t\t\t}\t\t\t}\t\t}); \t&lt;/script&gt;\t&lt;script&gt;\t\tconst ctz = document.getElementById('hisChart');\t\tnew Chart(ctz, {\t\t\ttype: 'line',\t\t\tdata: {\t\t\t\tlabels: ['Mon','Tue','Wed','Thur','Fri','Sat','Sun'],\t\t\t\tdatasets: [\t\t\t\t\t{ \t\t\t\t\t\tdata: [190,188,185,190,203,216,208],\t\t\t\t\t\tlabel: \"Calories\",\t\t\t\t\t\tborderColor: \"#FD8A8A\",\t\t\t\t\t\tfill: false\t\t\t\t\t}\t\t\t\t]\t\t\t},\t\t\toptions: {\t\t\t\taspectRatio: 1,\t\t\t\ttitle: {\t\t\t\t\tdisplay: true,\t\t\t\t\ttext: 'Calories consumption'\t\t\t\t}\t\t\t}\t\t});\t&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; " }, { "title": "[Alexa skill code example] How to use Promise, async and await", "url": "/posts/alexa-code-example/", "categories": "Side Projects, Smart Food Scale", "tags": "Alexa Developers, AVS-Device-SDK, Smart Home, VoiScale", "date": "2023-01-17 17:00:00 +0100", "snippet": "Alexa cookbook on Github A very good blog on making HTTP Requests in your Alexa skill, learn how to use asynchronous features in Node.js.function httpGet() { return new Promise(((resolve, reject) =&gt; { var options = { host: 'api.icndb.com', port: 443, path: '/jokes/random', method: 'GET', }; const request = https.request(options, (response) =&gt; { response.setEncoding('utf8'); let returnData = ''; response.on('data', (chunk) =&gt; { returnData += chunk; }); response.on('end', () =&gt; { resolve(JSON.parse(returnData)); }); response.on('error', (error) =&gt; { reject(error); }); }); request.end(); }));}const GetJokeHandler = { canHandle(handlerInput) { const request = handlerInput.requestEnvelope.request; return request.type === 'IntentRequest' &amp;&amp; request.intent.name === 'GetJokeIntent'; }, async handle(handlerInput) { const response = await httpGet(); console.log(response); return handlerInput.responseBuilder .speak(\"Okay. Here is what I got back from my request. \" + response.value.joke) .reprompt(\"What would you like?\") .getResponse(); },};(async function() { const lambdaClient = new LambdaClient({ region: \"us-west-2\" }); // create JSON object for service call parameters const params = { FunctionName : \"slotPull\", InvocationType : \"RequestResponse\", LogType : \"None\" }; // create InvokeCommand command const command = new InvokeCommand(params); // invoke Lambda function try { const response = await lambdaClient.send(command); console.log(response); } catch (err) { console.err(err); }})();function() { const lambdaClient = new LambdaClient({ region: \"us-west-2\" }); // create JSON object for service call parameters const params = { FunctionName : \"slotPull\", InvocationType : \"RequestResponse\", LogType : \"None\" }; // create InvokeCommand command const command = new InvokeCommand(params); // invoke Lambda function try { const response = await lambdaClient.send(command); console.log(response); } catch (err) { console.err(err); }}const https = require('https');function makeRequest(options) { return new Promise(( (resolve, reject) =&gt; { const request = https.request(options, (response) =&gt; { let data = ''; response.on('data', (chunk) =&gt; { data += chunk; }); response.on('end', () =&gt; { resolve(JSON.parse(data)); }); response.on('error', (error) =&gt; { reject(error); }); }); request.on('error', function(error) { reject(error); }); request.end(); } ));}function wait(duration) {// Create and return a new Promise return new Promise((resolve, reject) =&gt; { // These control the Promise // If the argument is invalid, reject the Promise if (duration &lt; 0) { reject(new Error(\"Time travel not yet implemented\")); } // Otherwise, wait asynchronously and then resolve the Promise. // setTimeout will invoke resolve() with no arguments, which means // that the Promise will fulfill with the undefined value. setTimeout(resolve, duration); });}const SearchHandler = { canHandle(handlerInput) { return handlerInput.requestEnvelope.request.type === 'IntentRequest' &amp;&amp; handlerInput.requestEnvelope.request.intent.name === 'SearchIntent'; }, handle(handlerInput) { const query = handlerInput.requestEnvelope.request.intent.slots.Item.value; const location = handlerInput.requestEnvelope.request.intent.slots.Location.value; const geocodeOptions = { host: 'geocoder.ls.api.here.com', path: `/6.2/geocode.json?apiKey=${here.apikey}&amp;searchtext=${location}`, method: 'GET' }; const errorMessage = `We didn't find any ${query} in ${location}`; return new Promise((resolve, reject) =&gt; { makeRequest(geocodeOptions).then((geocodeResponse) =&gt; { const coordinates = geocodeResponse.Response.View[0].Result[0].Location.DisplayPosition; const placesOptions = { host: 'places.ls.hereapi.com', path: `/places/v1/discover/search?at=${coordinates.Latitude},${coordinates.Longitude}&amp;q=${query.replace(/ /g, '+')}&amp;apiKey={YOUR-API_KEY}`, method: 'GET' }; makeRequest(placesOptions).then((placeResponse) =&gt; { const places = placeResponse.results.items; const examplePlace = places[0]; if (examplePlace) { const successOutput = `We found a nearby ${query} place near ${location}! ${examplePlace.title} is ${(examplePlace.distance * metersToMiles).toFixed(1)} miles away and is located at ${examplePlace.vicinity}`; resolve(handlerInput.responseBuilder.speak(successOutput).getResponse()); } else { resolve(handlerInput.responseBuilder.speak(errorMessage).getResponse()); } }).catch((error) =&gt; { resolve(handlerInput.responseBuilder.speak(errorMessage).getResponse()); }); }).catch((error) =&gt; { resolve(handlerInput.responseBuilder.speak(errorMessage).getResponse()); }); }); }};//example number guessinghandle(handlerInput) { const theNumber = handlerInput.requestEnvelope.request.intent.slots.number.value; const speakOutput = theNumber ; const repromptOutput = \" Would you like another fact?\"; return new Promise((resolve, reject) =&gt; { getHttp(URL, theNumber).then(response =&gt; { speakOutput += \" \" + response; resolve(handlerInput.responseBuilder .speak(speakOutput + repromptOutput) .reprompt(repromptOutput) .getResponse()); }).catch(error =&gt; { reject(handlerInput.responseBuilder .speak(`I wasn't able to find a fact for ${theNumber}`) .getResponse()); }); }); }const getHttp = function(url, query) { return new Promise((resolve, reject) =&gt; { const request = http.get(`${url}/${query}`, response =&gt; { response.setEncoding('utf8'); let returnData = ''; if (response.statusCode &lt; 200 || response.statusCode &gt;= 300) { return reject(new Error(`${response.statusCode}: ${response.req.getHeader('host')} ${response.req.path}`)); } response.on('data', chunk =&gt; { returnData += chunk; }); response.on('end', () =&gt; { resolve(returnData); }); response.on('error', error =&gt; { reject(error); }); }); request.end(); });}//async and await versionasync handle(handlerInput) { const theNumber = handlerInput.requestEnvelope.request.intent.slots.number.value; let speakOutput = theNumber ; const repromptOutput = \" Would you like another fact?\"; try { const response = await getHttp(URL, theNumber); speakOutput += \" \" + response; handlerInput.responseBuilder .speak(speakOutput + repromptOutput) .reprompt(repromptOutput) } catch(error) { handlerInput.responseBuilder .speak(`I wasn't able to find a fact for ${theNumber}`) .reprompt(repromptOutput) } return handlerInput.responseBuilder .getResponse();}const getHttp = function(url, query) { return new Promise((resolve, reject) =&gt; { const request = http.get(`${url}/${query}`, response =&gt; { response.setEncoding('utf8'); let returnData = ''; if (response.statusCode &lt; 200 || response.statusCode &gt;= 300) { return reject(new Error(`${response.statusCode}: ${response.req.getHeader('host')} ${response.req.path}`)); } response.on('data', chunk =&gt; { returnData += chunk; }); response.on('end', () =&gt; { resolve(returnData); }); response.on('error', error =&gt; { reject(error); }); }); request.end(); });}" }, { "title": "[Alexa APL Tutorial] Labs from Dabble Lab", "url": "/posts/alexa-APL/", "categories": "Side Projects, Smart Food Scale", "tags": "Alexa Developers, Alexa APL, VoiScale", "date": "2023-01-17 17:00:00 +0100", "snippet": "A very good YouTube channel Dabble Lab on Alexa APL design. Alexa developer documentationLab1 ContainersFrame layout in Container.code:{ \"type\": \"APL\", \"version\": \"1.7\", \"settings\": {}, \"theme\": \"dark\", \"import\": [], \"resources\": [ { \"dimensions\": { \"boxWidth\": \"100%\", //\"boxWidth\": 120, \"boxHeight\": 120 }, \"colors\": { \"pink\": \"#dc267f\", \"orange\": \"#fe6100\", \"blue\": \"#648fff\" } } ], \"styles\": {}, \"onMount\": [], \"graphics\": {}, \"commands\": {}, \"layouts\": {}, \"mainTemplate\": { \"parameters\": [ \"payload\" ], \"items\": [ { \"type\": \"Container\", \"width\": \"100vw\", \"height\": \"100vh\", //\"direction\": \"row\", //\"justifyContent\": \"center\", \"alignItems\": \"center\", \"wrap\": \"wrap\", \"items\": [ { \"type\": \"Frame\", \"backgroundColor\": \"grey\", \"display\": \"nromal\", \"opacity\": 0.7, \"width\": \"100%\", \"height\": \"100%\", \"position\": \"absolute\", \"alignSelf\": \"start\", // \"top\": 30, //\"bottom\": 30, //\"left\": 30, //\"right\": 30, //\"grow\": 1, \"description\": \"frame1 - pink\" }, { \"type\": \"Frame\", \"backgroundColor\": \"@orange\", //\"display\": \"invisible\", \"width\": \"@boxWidth\", \"height\": \"@boxHeight\", //\"height\": \"100%\", //\"grow\": 1, //\"shrink\": 1, //\"spacing\": 40, \"description\": \"frame2 - orange\" }, { \"type\": \"Frame\", \"backgroundColor\": \"@blue\", //\"display\": \"none\", \"width\": \"@boxWidth\", \"height\": \"@boxHeight\", //\"grow\": 1, //\"spacing\": 40, \"description\": \"frame3 - blue\" } ] } ] }}Lab2 Frame components" }, { "title": "[CS144] Introduction to Computer Networking", "url": "/posts/cs144-lectures/", "categories": "Course Notes, CS144", "tags": "computer networking", "date": "2023-01-10 17:00:00 +0100", "snippet": "Course info can be found here Good Blog TCPand socket Lecture videos:Bilibili and Youtube Problem: Applications send and receive data in packets over an Internet that is unreliable. Goal: Sending data reliably over an Internet that is unreliable.In summary:Packets are forwarded hop-by-hop using the IP destination address. Our applications use TCP to make sure they are delivered and put back in the correct order.Reliability A module behaves reliably when it: provides some stated abstraction/interface even in the face of underlying faults(e.g. packet loss) and when it can’t do that, the module signals failureQuestion: How to provide these abstractions reliably on top of an unreliable system?" }, { "title": "[CS144] Labs: build some significant pieces of the Internet", "url": "/posts/cs144-labs/", "categories": "Course Notes, CS144", "tags": "computer networking", "date": "2023-01-10 17:00:00 +0100", "snippet": "Course info can be found hereLab 0: networking warmupLab materialkeyword: reliable byte stream" }, { "title": "[OS: Three Easy Pieces] Book reading - Locks", "url": "/posts/OS-three-pieces/", "categories": "Course Notes, Operating System", "tags": "Operating System, Locks", "date": "2023-01-09 17:00:00 +0100", "snippet": "Book reference: Operating Systems: Three Easy PiecesLocksUsing Queues: Sleeping instead of Spinning" }, { "title": "[JavaScript for Alexa Skill Development] Chapter 6: Objects", "url": "/posts/Javascripts_Object/", "categories": "Side Projects, Smart Food Scale", "tags": "Alexa Developers, JavaScript, Asynchronization", "date": "2023-01-08 08:40:00 +0100", "snippet": "1. Introduction to ObjectsAn object is a composite value: it aggregates multiple value(primitive values or other objects) and allows you to store and retrieve those values by name. The methods of an object are typically inherited properties, and this “prototypal inheritance” is a key feature of JavaScript.Objects are mutable and manipulated by reference rather than by value. If the variable x refers to an object and the code let y = x; is executed, the variable y holds a reference to the same object, not a copy of that object. Any modifications to the object through variable y are also visible through the variable x.2. Creating ObjectsObjects can be created with object literals, with the new keyword, and with the Object.create() function.Object LiteralsThe easiest way to create an object is to include an object literal in your JavaScript.Creating Objects with newThe new keyword must be followed by a function invocation. A function used in this way is called a constructor and serves to initialize a newly created object.let o = new Object(); // Create an empty object: same as {}.let a = new Array(); // Create an empty array: same as [].let d = new Date(); // Create a Date object representing the current timelet r = new Map(); // Create a Map object for key/value mapping" }, { "title": "[JavaScript for Alexa Skill Development] Chapter 13: Asynchronous features", "url": "/posts/Javascripts_Promise/", "categories": "Side Projects, Smart Food Scale", "tags": "Alexa Developers, JavaScript, Asynchronization", "date": "2023-01-06 08:40:00 +0100", "snippet": "Good reference, this Blog.Contents from this book JavaScript: The Definitive Guide, 7th Edition channel.Promises are objects that represent the not-yet-available result of an asynchronous operation. The keywords async and await simplify asynchronous programming by allowing you to structure your Promise-based code as if it was synchronous. Finally, the for/await loop allow you to work with streams of asynchronous events using simple loops that appear synchronous.1. Asynchronous Progamming with CallbacksA callback is a function that you write and then pass to some other function. That other function then invokes your function when some condition is met or some synchronous event occurs.TimerssetTimeout(checkForUpdates, 60000);EventsClient-side JavaScript programs are almost universally event driven: rather than running some kind of predetermined computation, theytypically wait for the user to do something and then respond to the user’s actions.let okay = document.querySelector('#confirmUpdateDialogbutton.okay');// Now register a callback function to be invoked when the user clicks on that button.okay.addEventListener('click', applyUpdate);Network EventsAnother common source of asynchrony in JavaScript programming is network requests. getCurrentVersionNumber() makes an asynchronous request, it cannot synchronously return the value that the caller is interested in. Instead, the caller passes a callback function, which is invoked when the result is ready or when an error occurs.Callbacks and Events in NodeNode.js asynchronous example: reading the contents of a file. fs.readFile() takes a two-parameter callback as its last argument. Example to request for the contents of a URL in Node. Node uses on() method to register event listeners instead of addEventListener(). 2. Promises所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。A Promise is an object that represents the result of an asynchronous computation. That result may or may not be ready yet, and the Promise API is intentionally vague about this: there is no way to synchronously get the value of a Promise; you can only ask the Promise to call a callback function when the value is ready. To make it Promise-based, omit the callback argument, and instead return a Promise object. The caller can then register one or more callbacks on this Promise object, and they will be invoked when the asynchronous computation is done. callbacks drawbacks: nested callback, not clean difficult error handlingsUsing PromisesThe function you pass to then() is invoked asynchronously, even if the asynchronous computation is already complete when you call then().getJSON(url).then(jsonData =&gt; { // This is a callback function that will be asynchronously // invoked with the parsed JSON value when it becomes available.});Handling Errors with Promises Callback vs. Promise When something goes wrong in a synchronous computation, it throws an exception that propagates up the call stack until there is a catchclause to handle it. When an asynchronous computation runs, its caller is no longer on the stack, so if something goes wrong, it is simply not possible to throw an exception back to the caller.Asynchronous operations can fail in a number of ways, and robust code has to be written to handle the errors that will inevitably occur. When a Promise-based asynchronous computation completes normally, it passes its result to the function that is the first argument to then(). For Promises, we can do this by passing a second function to the then() method for error handling.getJSON(\"/api/user/profile\").then(displayUserProfile, handleProfileError);Promise Terminologywe say that the Promise has been fulfilled if and when the first callback is called; we say that the Promise has been rejected if and when the second callback is called; if a Promise is neither fulfilled nor rejected, then it is pending. And once a promise is fulfilled or rejected, we say that it is settled.Chaining PromisesPromise provides a natural way to express a sequence of asynchronous operations as a linear chain of then() method invocations, without having to nest each operation within the callback of the previous one. Example to illustrate how a chain of Promises can make it easy to express a sequence of asynchronous operationsMethod chain example:fetch().then().then()We know that the fetch() function returns a Promise object, and we can see that the first .then() in this chain invokes a method on that returned Promise object. But there is a second .then() in the chain, which means that the first invocation of the then() method must itself return a Promise.fetch(theURL) // task 1; returns promise 1 .then(callback1) // task 2; returns promise 2 .then(callback2); // task 3; returns promise 3But just because task 2 begins when c1 is invoked, it does not mean that task 2 must end when c1 returns. Promises are about managing asynchronous tasks, after all, and if task 2 is asynchronous (which it is, in this case), then that task will not be complete by the time the callback returns.About resolved:Promises in ParallelSometimes we want to execute a number of asynchronous operations on parallel.Making PromisesThis section shows how you can create your own Promise-based APIs.Promises Based On Other PromisesGiven a Promise, you can always create a new one by calling .then().//Promise returned by getJSON() resolves to the Promise returned by response.json(). function getJSON(url) { return fetch(url).then(response =&gt; response.json());}Promises Based On Synchronous ValuesSometimes, you may need to implement an existing Promise-based API and return a Promise from a function, even though the computation to be performed does not actually require any asynchronous operations. Promise.resolve() and Promise.reject()Promise.resolve() takes a value as its single argument and returns a Promise that will immediately(but asynchronously) be fulfilled to that value.To be clear: The Promises returned by these static methods are not already fulfilled or rejected when they are returned, but they will fulfill or reject immediately after the current synchronous chunk of code has finished running. Typically, this happens within a few milliseconds unless there are many pending asynchronous tasks waiting to run. It is fairly common to have synchronous special cases within an asynchronous function, and you can handle these special cases with Promise.resolve() and Promise.reject().Promises from Scratchwhat about writing a Promise-returning function when you can’t use another Promise-returning function as the starting point? In that case, you use the Promise() constructor to create a new Promise object that you have complete control over.Alexa skill example:Pay attension:The constructor synchronously calls your function with function arguments for the resolve and reject parameters. After calling your function, the Promise() constructors returns the newly created Promise. That returned Promise is under the control of the function you passed to the contructor.That function should perform some asynchronous operation and then call the resolve function to resolve or fulfill the returned Promise or call the reject function to reject the returned Promise.function wait(duration) { // Create and return a new Promise return new Promise((resolve, reject) =&gt; { // These control the Promise // If the argument is invalid, reject the Promise if (duration &lt; 0) { reject(new Error(\"Time travel not yet implemented\")); } // Otherwise, wait asynchronously and then resolve the Promise. // setTimeout will invoke resolve() with no arguments, which means // that the Promise will fulfill with the undefined value. setTimeout(resolve, duration); });}This getJSON() example illustrates how we can implement Promise-based APIs on top of other styles of asynchronous programming. Promises in Sequence3. async and awaitThese new keywords dramatically simplify the use of Promises and allow us to write Promise-based, asynchronous code that look like synchronous code that blocks while waiting for network response or other asynchronous events.await ExpressionsThe await keyword takes a Promise and turns it back into a return value or a thrown exception. Given a Promise object p, the await p waits until p settels. If p fulfills, then the value of await p is the fulfillment value of p. If p is rejected, then the await p throws the rejection value of p. It literally does nothing until the specified Promise settles. The code remains asynchronous, and the await simply disguises this fact. This means that any code that uses await is itself asynchronous.let response = await fetch(\"/api/user/profile\");let profile = await response.json();async FunctionsBecause any code that uses await is asynchronous, there is one critical rule: you can only use the await keyword within functions that have been declared with the async keyword. Declaring a function async means that the return value of the function will be a Promise even if no Promise-related code appears in the body of the function.async function getHighScore() { let response = await fetch(\"/api/user/profile\"); let profile = await response.json(); return profile.highScore;}The getHighScore() function is declared async, so it returns a Promise. And because it returns a Promise, we can use the await keyword with it:displayHighScore(await getHighScore());Awaiting Multiple PromisesGiven this getJSON() function:async function getJSON(url) { let response = await fetch(url); let body = await response.json(); return body;}Now suppose we want to fetch two JSON values with this function:let value1 = await getJSON(url1);let value2 = await getJSON(url2);Issue: It is unnecessarily sequential: the fetch of the second URL will not begin until the first fetch is complete. If the second URL does not depend on the value obtained from the first URL, then we should probably try to fetch the two values at the same time. Solution: In order to await a set of concurrently executing async functions, we use Promise.all() just as we would if working with Promises directly:let [value1, value2] = await Promise.all([getJSON(url1), getJSON(url2)]);Implementation detailsTo think about what is going on under the hood. Suppose you write an async like this:async function f(x) { /* body */ }You can think of this as a Promise-returning function wrapped around the body of your original function:function f(x) { return new Promise(function(resolve, reject) { try { resolve((function(x) { /* body */ })(x)); } catch(e) { reject(e); } });}4. Asynchronous iterationPromises are useful for single-shot asynchronous computations but were not suitable for use with resources of repetitive asynchronous events, such as setInterval(), the “click” event in a web browser, or the “data” event on a Node stream. Because single Promises do not work for sequences of asynchronous events, we also cannot use regular async functions and the await statements for these things.The for/await Loop" }, { "title": "[Stanford CS110] Principles of Computer Systems", "url": "/posts/cs110/", "categories": "Course Notes, Stanford CS110", "tags": "Operating System, Computer Systems", "date": "2022-12-12 02:00:00 +0100", "snippet": "Book reference: Operating Systems: Three Easy PiecesLecture references: Spring 2017 CS110 Archived Winter 2020 CS110 Archived YouTube VideosWhy use threads? There are at least two major reasons you should use threads. The first is parallelism. The task of transforming your standard single-threaded program into a program that does this sort of work on multiple CPUs is called parallelization, and using a thread per CPU to do this work is a natural and typical way to make programs run faster on modern hardware. The second reason is to avoid blocking program progress due to slow I/O, while one thread in your program waits, the CPU scheduler can switch to other threads, which are ready to run and do something useful. Threading enables overlap of I/O with other activities within a single program. How to support synchronization? support atomicity support sleeping/waking interation (most often, one thread must wait for another to complete some action before it continues)What we will do is ask the hardware for a few useful instructions upon which we can build a general set of what we call synchronization primitives. By using this hardware support, in combination with some help from the operating system, we will be able to build multi-threaded code that accesses critical sections in a synchronized and controlled manner.Terms:Lecuture 7 SignalsA signal is a way to notify a process that an event has occured.five-children example:Problem with this program: it never stops.It turns out that if children end in roughly the same time, there would be a kernel race condition. If a bunch of children end at the same time, the kernel would just say, fine, I am going to call one instance of the child handler function, you are going to deal with that result. The nice thing about it is that if you are already in the child, the signal handler and another child ends, it will call that signal handler again, so it’s not that you lost any children, it’s just that you have to deal with all the ones that have already ended immediately. So we’ll do it in the signal handler.First step improvement:static void reapChild(int sig) { while(true) { waitpid(-1, NULL, 0); numChildrenDonePlaying++; printf(\"numChildrenDone playing: %zu\\n\", numChildrenDonePlaying); }}Lecuture 8 Race conditions, deadlock and data integrityThe Race Condition Checklist Identify shared data that may be modified concurrently what global variables are used in both the main code and signal handler? Document and confirm an ordering of events that caused unexpected behavior what assumptions are made in the code that can be broken by certain orderings? Use concurrency directives to force expected orderings how can we use signal blokcing and atomic operations to force the correct ordering(s)?Lecuture 11 Multithreading and Condition VariablesWhen coding with threads, you need to ensure that: there are no race conditions, even if they rarely cause problems, and there is zero threat of deadlock, lest a subset of threads are forever starving for processor timemutexes are generally the solution to race conditions. We can use them to mark the boundaries of critical regions and limit the number of threads present within them to be at most one.Deadlock can be programmatically prevented by implanting directives to limit the number of threads competing for a shared resource.Lecuture 12 mutex, conditional_variable_any, semaphorecondition variable: a variable that can be shared across threads and used for one thread to notify another thread when something happens. A thread can also use this to wait until it is notified by another thread. We can call wait to sleep until another thread signals this condition variable. We can call notify_all to send a signal to waiting threads.1. The general pattern of conditional_variable_anycv.wait(m): if there aren’t any permits, the thread is forced to sleep via cv.wait(m). The thread manager releases the lock on m just as it’s putting the thread to sleep. Here’s what cv.wait does: it puts the caller to sleep and unlocks the given lock, all atomically (it sleeps, then unlocks) it wakes up when the cv is signaled upon waking up, it tries to acquire the given lock (and blocks until it’s able to do so) then, cv.wait returnscv.nofity_all(): when cv is notified within grandPermission, the thread manager wakes the sleeping thread, but mandates it reacquire the lock on m, which is very much needed to properly reevaluate the permits == 0, before returning from cv.wait(m).static void waitForPermission(size_t&amp; permits, condition_variable_any&amp; cv, mutex&amp; m) { lock_guard&lt;mutex&gt; lg(m); while(permits == 0) cv.wait(m); permits--;}static void grantPermission(size_t&amp; permits, condition_variable_any&amp; cv, mutex&amp; m) { lock_guard&lt;mutex&gt; lg(m); permits++; if(permits == 1) cv.notify_all();}A second form of wait() is useful because the while loop is very common:template &lt;Predicate pred&gt;void condition_variable_any::wait(mutex&amp; m, Pred pred) { while(!pred()) wait(m);}The predicate is a function that returns true of false. We often use a lambda function for the predicate:static void waitForPermission(size_t&amp; permits, condition_variable_any&amp; cv, mutex&amp; m) { lock_guard&lt;mutex&gt; lg(m); cv.wait(m, [&amp;permits]{ return permits &gt; 0; }); //if true, re-acquire lock and unblocked; else keep waiting, release lock. permits--;}Till now, the size_t permits, condition_variable_any, and mutex are collectively working together to track a resource count. They work to ensure that a thread blocked on zero permission slips goes to sleep indifinitely, and that it remains asleep until another thread returns one.2. semaphoreA semaphore is a variable type that lets you manage a count of finite resources. It is a useful way to generalize the “permits” idea.constexpr on_thread_exit_t on_thread_exit {};class semaphore {public: semaphore(int value = 0); void wait(); void signal(); void signal(on_thread_exit_t ote);private: int value; std::mutex m; std::condition_variable_any cv; semaphore(const semaphore&amp; orig) = delete; const semaphore&amp; operator=(const semaphore&amp; rhs) const = delete;}; void semaphore::wait() { lock_guard&lt;mutex&gt; lg(m); cv.wait(m, [this] {return value &gt; 0;}); value--;}/*Why does the capture clause include the this keyword?Because the anonymous predicate function passed to cv.wait is just that—a regular function. Since functions aren't normally entitled to examine the private state of an object, the capture clause includes this to effectively convert the bool-returning function into a bool-returning semaphore method.*/void semaphore::signal() { lock_guard&lt;mutex&gt; lg(m); value++; if(value == 1) cv.notify_all();}Using a semaphore is straightforward: you first declare a semaphore with a number of permits you would like:semaphore permits(5);When a thread wants to use a permit, it first waits for the permit, and then signals when it’s done using a permit:permits.wait(); //if five other threads currently hold permits, this will block.permits.signal(); //if other threads are waiting, a permit will be available. Q1: what would a semaphore initialized with 0 mean? A1: In this case, we don’t have any permits, permits.wait() always has to wait for a signal, and will never stop waiting until that signal is received.semaphore permits(0);Q2: What about a negative initializer for a semaphore? A2: In this case, the semaphore would have to reach 1 before the wait would stop waiting. You might want to wait until a bunch of threads finished before a final thread is allowed to continue.3. Thread rendezvousThread rendezvous is a generalization of thread::join. It allows one thread to stall - via semaphore::wait - until another thread calls semaphore::signal, often because the signaling thread just prepared some data that the waiting thread needs before it can continue." }, { "title": "[Alexa Skill development] 0 to 1: Hands-on Alexa Voice Service", "url": "/posts/alexa-developer/", "categories": "Side Projects, Smart Food Scale", "tags": "Alexa Developers, AVS-Device-SDK, Smart Home, Raspberry Pi", "date": "2022-11-18 17:15:00 +0100", "snippet": "Alexa Voice Service: A Developer’s Perspective AVS Device SDK on Github" }, { "title": "[mit6.S081] A Quick Recap On OS Basics", "url": "/posts/xv6-unixt-recap/", "categories": "Course Notes, MIT6.S081", "tags": "MIT6.s081, XV6, Operating System, Unix", "date": "2022-11-14 10:00:00 +0100", "snippet": "Good lecture references: IIT Bombay, Lectures on OS and Youtube Operating Systems: Three Easy Pieces Blog Zhihu ProcessesAbout Operating System (Virtualization-&gt;process+virtual memory + Concurrecncy + Persistence) middleware between user programs and system hardware shares a computer(CPU) among mutiple programs -&gt; timeshares, scheduling manages and abstracts the low-level hardware share the hardware/memory among mutiple programs provides controlled ways for programs to interact OS goal: isolation + efficiency + convenience About Process Abstraction process is a running program process is composed of PID, Memory Image(code, data, stack, heap), CPU context(registers, current operands, pc, sp), File descriptors process controll block PID Process state Pointers to other related processes CPU context Pointers to memory locations Pointers to open files About API functions available to write user programs; system calls are special API provided by OS system call is a function call into OS kernel that runs at a higher privilege level of the CPU POSIX API, a standard set of system calls, ensures program portability Libaries hid the details of invoking system calls, eg. C -&gt; libc -&gt; syscall (printf -&gt; write) process related syscall, fork(), exec(), exit(), wait() About fork() it’s used to create a new process by making a copy of parent’s memory image + parent’s file descriptor table child process is added to process list and scheduled both parent and child start to executeAbout wait() int wiat(int *status), returns the PID of an exited(or killed) child of the current process, and copies the exit status of the child to the address passted to wait. wait() blocks in parent until child terminates; if the caller has no children, wait immediately returns -1; the parent doesn’t care about the exit status of a child when pass a 0 address to wait. Terminated process exists as zombie, when a parent calls wait(), zombie child is cleaned up or “reaped” - 收割, 收获. If parent terminates before child, init process adopts orphans and reaps it. About shell init process is created after init of hardware init spawns a shell like bash shell, read command -&gt; fork a child - &gt; exec -&gt; wait for child -&gt; read next command I/O redirection The close system call releases a file descriptor, making it free for resuse by a future open, pipe, or dup system call. An newly allocated file descriptor is always the lowest numbered unused descriptor of the current process. File descriptor and fork interact to make I/O redirection easy to implement. Fork copies the parent's file descriptor table along with its memory, so that the child starts with exactly the same open files as the parent. They system call exec replaces the calling process's memory but perserve its file table. This behavior allows the shell to implement I/O redirection by forking, reopening chosen file descriptors in the child, and the calling calling exec to run the new program.Example/* Simplified version of cat &lt; input.txt */char *argv[2];argv[0] = \"cat\";argv[1] = 0;if(fork() == 0) { close(0); open(\"input.txt\", O_RDONLY); exec(\"cat\", argv); //cat then executes with fd 0(standard input) referring to input.txt }MemoryConcurrencyI/O and Filesystems" }, { "title": "[mit6.S081] Lab 0: Xv6 and Unix utilities", "url": "/posts/xv6-00/", "categories": "Course Notes, MIT6.S081", "tags": "OS, XV6, Operating System, Syscall", "date": "2022-11-12 10:00:00 +0100", "snippet": "Good lecture references: IIT Bombay, Lectures on OS and Youtube Blog Zhihu This Lab will familiarize you with xv6 and its system calls." }, { "title": "[German Learning] Deutsch von meiner Lehrerin", "url": "/posts/German-from-Sandra/", "categories": "Life in Germany, German Language", "tags": "German Language, Learn German from Sandra", "date": "2022-11-11 17:12:14 +0100", "snippet": "Lesson 14 German words for daily use: Der Schal [Plural: Die Schals] –&gt; Because you couldn’t find yours today. Ich habe heute meinen Schal vergessen. Die Brotzeit [No Plural] –&gt; A word Bavarians use for food they bring somewhere (e.g. to work), but it also describes a time of the day in which you sit down to have a small meal (It must include only “cold” food like bread, butter, cheese, …). “Brotzeit” basically means “time for bread”. Ich mache jetzt Brotzeit. Xu hat heute Brotzeit in die Arbeit mitgenommen. Die Drehtür [Plural: Die Drehtüren] –&gt; The door you always use to enter the company building, but never to exit it. Xu geht nie durch die Drehtür, wenn er das Gebäude verlässt. Der Augenblick [Plural: Die Augenblicke] –&gt; A very short timespan / moment [“Auge” (eye) + “Blick” (glance, look) = “Augenblick”, a moment as short as a single glance]. Im letzten Augenblick hat Xu seinen Zug erwischt. 1 German word to become even cooler: Das (halbe) Hendl [Plural: Die (halben) Hendl] –&gt; Bavarian (and the only allowed) word for 1/2 of a rotisserie chicken. In other parts of Germany you say “Das (halbe) Hähnchen”, but that’s not cool enough and you don’t want Bavarians to look down on you, right? Hallo, ich hätte gerne ein halbes Hendl.Lesson 24 German words for daily use: Der Augenwinkel [Plural: Die Augenwinkel] (Nomen) –&gt; The corner of your eye. (Der Winkel deines Auges.) Xu beobachtet Sandra aus dem Augenwinkel. hinterhältig (Adjektiv) –&gt; Describes a person that acts friendly but secretly has bad intentions. (Beschreibt eine Person, die sich freundlich benimmt, aber böse Absichten hat) Xu ist nicht hinterhältig. Auch Sandra ist keine hinterhältige Person. Die Pfefferminze [Plural: Die Pfefferminze] (Nomen) –&gt; A medicinal plant which also tastes really good and fresh. Also known as “Mint”, although it’s not the same plant. (Eine Heilpflanze, die auch sehr gut und frisch schmeckt. Auch als “Minze” bekannt, obwohl das nicht die gleiche Pflanze ist.) Xu isst gerne Kaugummi, der nach Pfefferminze schmeckt. Sandra mag Pfefferminz-Eis. –&gt; When describing a taste, you can skip the “e” in the end. (Wenn du einen Geschmack beschreibst, kannst du das “e” am Ende weglassen.) mürrisch (Adjektiv) –&gt; Describes a person that is in a bad mood and doesn’t hide it. (Beschreibt eine Person, die schlechte Laune hat und sie nicht versteckt.) Xu ist heute sehr mürrisch. Sandra macht heute ein mürrisches Gesicht. 1 BONUS phrase: Ein (+ Adjektiv) Gesicht machen. –&gt; To produce a facial expression that shows a certain kind of emotion. (Ein Gesichtsausdruck, der eine bestimmte Art von Emotion zeigt.) Xu macht heute ein langes Gesicht. Sandra macht ein ungläubiges Gesicht. Du machst ein lustiges Gesicht.1 German word to become even cooler: Der Depp [Plural: Die Deppen] (Nomen) –&gt; A not so offensive and rather funny swearword to describe a really stupid person. (Eine nicht so beleidigendes und eher lustiges Wort, um eine wirklich dumme Person zu beschreiben.) Lern Autofahren, du Depp! Die xxx ist voller Deppen! Schau dir diesen Depp an!" }, { "title": "[DW Travel] Hiking the Bavarian Alps", "url": "/posts/DW-Travel/", "categories": "Life in Germany, Germany Road Trip", "tags": "Travel, Life in Germany", "date": "2022-11-11 17:09:14 +0100", "snippet": "Copyright to DW Travel channelEpisode 0: Hiking The Bavrian Alps - Top Things To Do In the Bavarian Alps" }, { "title": "[German Learning] Deutschtrainer A1/A2", "url": "/posts/Deutschtrainer-A1-A2/", "categories": "Life in Germany, German Language", "tags": "German Language, German Beginner Level", "date": "2022-11-10 17:21:14 +0100", "snippet": "A1/A2 Beginner Level from Deutsch lernen mit der DW Copyright to DW channel1. Sich vorstellen 自我介绍der Name - der Vorname - der Nachname Wie ist dein Name?Wie ist Ihr Name? Wie heißen Sie?Wie heißt du? Ich heiße Franziska. Wie ist dein Nachname?Wie ist Ihr Nachname? Mein Nachname ist Neumann. Wer sind Sie?Wer bist du? Ich bin Franziska.2. Im Gespräch 谈话Ja - Nein Okay - Entschuldigung! Danke. Vielen Dank. Bitte. 不用谢Gerne. 我很乐意Gern geschehen. 不客气Kein Problem. Das macht nichts! 没关系Herzlichen Glückwunsch! 衷心祝贺 Viel Glück! 祝好运 Ich freue mich! 我很高兴Das ist toll! 太棒了！ Achtung! 当心!Auf keinen Fall! - No way! - Under no circumstances! - 坚决不!Das geht leider nicht. 可惜不行.3. Begrüßung, Abschied 问候,道别Hallo! Hi! Guten Tag! Guten Morgen, Peter! Guten Tag, Frau Steller! Guten Abend, Herr Richter! 晚上好!Gute Nacht, Anna! 晚安!Bis morgen! Auf Wiedersehen! 再见Bis bald! 回见Tschüss!4. Wie geht es dir? 你好吗？Wie geht es dir? Wie geht es Ihnen? Mir geht es gut, danke. 我很好, 谢谢. Mir geht es nicht so gut. 我不太好.Mir geht es schlecht. 我很糟糕.Ich bin glücklich. 我很快乐. Ich bin müde. Ich bin krank. Ich bin erkältet. 我感冒了. Ich bin gestresst. 我很忙, 我压力很大. Ich bin sauer. - I am pissed off. - 我生气了. Ich bin traurig. - I am sad. - 我伤心了. Ich brauche Hilfe. 5. Woher kommst du? 你来自哪里?Woher kommst du? - Woher kommen Sie? Ich komme aus Russland. Wir kommen aus der Türkei. Ich komme aus der Nähe von Berlin. 我来自柏林附近地区. das Land 国家 - die Stadt 城市Wo ist das? 这是哪里? Das ist eine Stadt in Deutschland. Herzlich willkommen! 热烈欢迎!Asien - Europa - Afrika - Nordamerika - Südamerika - Australien 6. Wo wonnst du? 你住哪里?Wo wohnst du? - Wo wohnen Sie? Ich wohne in Berlin. Das liegt in Ostdeutschland.- 它在德国的东部. Wir wohnen in einem Dorf. - the village/das Dorf - 我们住在一个村子里. Ich wohne auf dem Land. 我住在乡下. Wo ist das? Das ist in Bayern. das Bundesland 德国的联邦州 Wie ist die Adresse? Die Adresse ist… Ich wohne in der Bahnhofstraße. Ich wohne bei Freunden. 我和朋友住在一起.7. Familie 家庭Wer ist das? Das ist meine Familie.die Familie - die Eltern - die Mutter - der Vater - das Kind Ich habe keine Kinder. 我没有孩子. die Tochter - der Sohn Ich habe zwei Söhne. die Schwester 姐妹 - der Bruder 兄弟die Großmutter - der Großvater die Ehefrau 妻子 - der Ehemann 丈夫 Ich bin verheiratet. 我已婚. Ich bin ledig. 我单身. 8. Zuwanderung 移民(Immigration)Ich möchte Asyl beantragen. 我想申请避难. beantragen: apply for; asyl: asylum der Flüchtling - 难民 befristet 暂时的, 限制期限的 befristeter Aufenthalt 期限居留 unbefristet 不期限的 die Duldung 容忍居留die Aufenthaltserlaubnis 居留许可Ich habe eine Aufenthaltserlaubnis. Meine Aufenthaltserlaubnis ist abgelaufen. 我的居留许可过期了.Ich möchte sie verlängern. 我想要延长.die Arbeitserlaubnis 工作许可 die Unterschrift 签名das Formular - die Dokumente der Pass 护照 - das Visum 签证- die Staatsbürgerschaft 国籍9. Um Hilfe bitten 请求帮助Entschuldigung, kannst du mir helfen? Entschuldigung, können Sie mir helfen? Ja, natürlich. Vielen Dank. Ich habe eine Frage. Wissen Sie, wo das ist? 您知道,这在哪里吗? Leider nicht. Ich spreche kein Deutsch. Ich verstehe das nicht. Was bedeutet das? 这是什么意思? Wie bitte? 你说什么?Können Sie das wiederholen bitte? 您能重复一遍吗? Können Sie bitte langsamer sprechen? Entschuldigung, sprechen Sie Englisch? Entschuldigung, wo ist die Information? 10. Deutsch lernen 学习德语die deutsche Sprache 德语 die Grammatik 语法 - die Vokabeln 词汇der Deutschkurs Ich möchte mich für einen Kurs anmelden. 我想要报名参加学习班. Ich möchte Deutsch lernen. Ich lerne Deutsch. Ich spreche ein bisschen Deutsch. Ich spreche kein Deutsch. Ich spreche Englisch. Ich spreche Arabisch. die Niveaustufe - the level 级别 die Lehrerin 女老师 - die Pfüfung 考试- die Fremdsprache 外语 11. Arbeit und Beruf 工作和职业der Beruf Was machst du beruflich? - Was machen Sie beruflich? Was bist du von beruf? - Was sind Sie von beruf? Ich bin Bauarbeiter. 建筑工人 - Ich bin Polizistin. 女警察 Ich bin arbeitslos. 我没有工作. Ich studiere. 我上大学. Ich mache eine Ausbildung. 我在进行职业培训. arbeiten 上班 - die Arbeit 工作 Ich suche Arbeit. 12. Berufe 职业die Ärztin 女医生 Ich bin Ärztin. der Lehrer Ich möchte Lehrer werden. 我想当一名教师. die Erzieherin 幼儿园女老师 der Krankenpfleger 男护士 die Journalistin 女记者 der Ingenieur 工程师 die Computerspezialistin der Architekt 建筑师die Taxifahrerin der Busfahrer die Friseurin 女理发师 der Koch 厨师 die Verkäuferin 女售货员 der Kfz-Mechatroniker 汽车机械工程师 die Handwerkerin 女技工 13. Telefon und E-Mail 电话和邮件die Telefonnummer Wie ist deine Telefonnummer? - Wie ist Ihre Telefonnummer? Meine Telefonnummer ist 07354555777. die E-Mail-Adresse Kannst du mir deine E-Mail-Adresse geben? 你能给我你的电子邮件地址吗? Wie ist Ihre E-Mail-Adresse? Meine E-Mail-Adresse ist hallo@dw.com. anrufen 打电话Kann ich dich anrufen? - Kann ich Sie anrufen? - Ich rufe dich an. das Handy - die Handy-Nummer Ich habe kein Handy. Ich habe keine E-Mail-Adresse. Bist du auf Facebook? 你用脸书吗？Hast du WhatsApp? 14. Zahlen 数字die Zahl15. Monate 月份das Jahr - der Monat - die Woche - der Tag der Januar - Es is Januar. - im Januar der Februar der März der April der Mai der Juni der Juli der August der September der Oktober der November der Dezember der Frühling 春天 der Sommer der Herbst der Winter 16. Tage 日子der Tag der Montag - am Montag der Dienstag der Mittwoch der Donnerstag der Freitag der Samstag der Sonntag die Woche - diese Woche - nächste Woche das Wochenende 周末 am Wochenende 在周末 vorgestern - gestern - heute - morgen - übermorgen 17. Uhrzeit 时间die Uhr 钟表 Entschuldigung, wie viel Uhr ist es? Entschuldigung, wie spät ist es? Es ist zwei Uhr. Es ist 14 Uhr. Es ist Viertel nach acht. 现在是八点一刻. Es ist halb drei. 现在是两点半. Es ist Viertel vor zwölf. - 11:45. Es ist zwanzig vor zehn. - 09:40. Es ist zehn nach sieben. - 07:10. Wir treffen uns um 15 Uhr. die Stunde 小时 Das dauert eine halbe Stunde. 18. Tagesablauf 日程morgens 上午 Ich stehe um acht Uhr auf. 我早上八点起床. frühstücken 吃早餐 Ich putze mir die Zähne. 我刷牙. Ich dusche täglich. 我每天都洗澡. Ich wasche mir die Haare. 我洗头发. Ich ziehe mich an. 我穿衣服. Um neun Uhr fahre ich zur Arbeit. 我九点上班. mittags 中午die Mittagspause 午休 Um eins esse ich zu Mittag. 我一点吃午饭. abends 晚上 Ich mache um 18:30 Uhr Feierabend. 我晚上六点半下班. Ich gehe nach Hause. nachts 夜晚 Ich gehe um 22 Uhr ins Bett. 19. Absagen 取消der Termin 约定的日期 Ich hatte einen Termin. Ich habe einen wichtigen Termin. 我有一个重要的预约. Ich muss den Termin leider absagen. 我必须得取消预约. Ich kann leider nicht kommen. 可惜我不能来. Ich schaffe es leider nicht. 我做不到，我赶不到. Mir ist etwas dazwischengekommen. 临时有点事情. Ich bin krank. 我生病了. Ich habe den Bus verpasst. 我错过了公交. Ich komme etwas später. 我会迟到一点. Es tut mir leid. 我很抱歉. Können wir das verschieben? 我们能推迟吗？ Das ist schade. 很遗憾. Das macht nichts. 没关系. Wir machen einen neuen Termin. 我们重新约个日期. 20. Verkehrsmittel 交通工具der Nahverkehr 市内交通 der Bus Ich fahre mit dem Bus. die U-Bahn Ich nehme die U-Bahn. die Straßenbahn 有轨电车 Die Straßenbahn fährt zum Hauptbahnhof. die Haltestelle 车站 Sie müssen hier einsteigen. 您必须这里上车. Sie müssen hier aussteigen. 您必须这里下车. Sie müssen hier umsteigen. 您必须这里换乘. das Fahrrad Ich fahre mit dem Fahrrad. das Auto Ich fahre mit dem Auto. das Taxi Ich nehme ein Taxi. 21. Verreisen 去旅行Ich möchte verreisen. 我想去旅行. Wohin fährst du? 你去哪里？ Ich möchte nach Berlin fahren. 我想开车去柏林. Ich möchte Freunde besuchen. 我想去拜访朋友. der Hauptbahnhof 中央火车站 der Zug - die Bahn 火车 Entschuldigung, fährt der Zug nach Berlin? 请问，火车是开往柏林的吗？ Entschuldigung, wann fährt der Zug? 抱歉，火车什么时候开？ Der Zug fährt um 12:30 Uhr. Der Zug hat Verspätung. 火车晚点了. Die Bahn fährt nach Potsdam. 这列火车开往波茨坦. der ICE 城际高速列车 Der ICE fährt nach München. das Flugzeug Ich fliege nach Ägypten. 我飞往埃及. die Fähre 渡船;海运;水运 22. Ein Zugticket bitte 买车票die Fahrkarte/das Ticket 车票 Entschuldigung, wo kann ich eine Fahrkarte kaufen? 请问哪里可以买车票？Entschuldigung, ich brauche ein Ticket nach Berlin. 打扰，我需要一张去柏林的车票.Entschuldigung, wie viel kostet eine Fahrkarte nach München? 抱歉，去慕尼黑的车票多少钱？ einfache Fahrt 单程 - die Einzelfahrkarte 单程票 hin und zurück 往返 Ich möchte einen Sitzplatz reservieren bitte. 我想预订一个座位. das Abteil 车厢 der Großraumwagen 开放式车厢 für die erste Klasse 一等座 für die zweite Klasse 二等座 am Fenster 靠窗 - am Gang 靠过道 " }, { "title": "[German Learning] HARRY - gefangen in der Zeit", "url": "/posts/Harry-German/", "categories": "Life in Germany, German Language", "tags": "German Language", "date": "2022-11-10 17:09:14 +0100", "snippet": "About this storyWhen Harry is struck by lightning in the Black Forest(Schwarzwald), he gets stuck in a time warp. Since no one believes him that he experiences the same day over and over again, he has no choice but to solve this riddle himself. Will he manage to escape? Let’s follow this series and find out! Copyright to Deutsch lernen mit der DW channel.Episode 36Meet Dr. Anderson at an University lecture.vacabulary:der Angeber - the boaster - 吹嘘者 interessant - interessanter - am interessantesten conversationHarry: Anderson lügt! A: Hey du! Halt die Klappe! Die Vorlesung war interessant! Harry: Er lügt! A: Wie bitte? Er lügt? Spinnst du? Andersons Vorlesung ist interessant. B: Ja ja, seine Vorlesungen sind viel interessanter als andere, viel interessanter! A: Genau! Sie sind am interessantesten und am besten! Episode 37Harry tries to break into Dr. Anderson’s office.vacabulary:der Einbrecher - the burglar - 窃贼 conversationWoman: Moment mal! Was machen Sie da an der Tür? Wieso haben Sie einen Draht in der hand? Sie, sie sind ein Einbrecher! Sie wollen in das Büro einbrechen! Harry: Ich bin kein Einbrecher! Woman: Das glaube ich Ihnen nicht! Harry: Ich habe einen Termin bei Dr. Anderson. Woman: Ich kenne Dr. Andersons Terminkalender, denn ich bin seine Sekretärin. Harry: Ah, ich habe viel von Ihnen gehört. Woman: Ach ja? Harry: Oh ja, Dr. Anderson hat gesagt: Meine Sekretärin ist fleißig - nein, meine Sekretärin ist am fleißigsten! Woman: Ja? Wirklich? Das hat Anderson über mich gesagt? Harry: Ja, und er hat gesagt: Meine Sekretärin ist shr freundlich, sie macht Ihnen die Tür auf. Woman: Also, wenn es so ist. Wer sind Sie eigentlich? Harry: Oh, ich bin ein Kollege. Mein Name ist Harry Walkott, Professor Harry Walkott. Woman: Ich habe Sie aber noch nie gesehen. Harry: Ich komme aus Traponia. Ich bin Zeitschleifen Experte. Ich bin Universitätsprofessor, wie Dr. Anderson. Woman: Na dann… Möchten Sie einen Kaffee, Herr Professor? Ich mache Ihnen gerne einen. Harry: Einen Kaffee? Aber ja! Das ist sehr freundlich. Woman: Ich bin gleich wieder da. Fühlen Sie sich wie zu Hause. Daily example: Ich will wieder mit dir Kaffee trinken gehen. " }, { "title": "[Random thoughts] Live for Your Self", "url": "/posts/about-life/", "categories": "Random thoughts", "tags": "Life attitude, Lebenseinstellungen, Ansichten, Werte, 生活态度", "date": "2022-11-10 14:32:00 +0100", "snippet": "Some thoughts on Life Attitude/What Other People Think, from a friend 做自己想做的任何事, 不用在意别人的看法Changed a bit from the original: I didn’t go to some activities with my girlfriend/boyfriend and I didn’t want to meet her/his friends because I thought I had to get a better job/lose some weight/grow more muscles, etc. first. Turned out that this way of thinking isolated me and held me back from living life to the fullest/experiencing new things etc. I mean it took me a while to understand that I see myself very differently than other people see me. People don’t give a shit if you earn 5K euro more/6 packs/weight 6kg too much. So I started to not give a shit about what other people think. I simply don’t care anymore, because it’s my life, my body and I have to be happy the way I am. It simply doesn’t matter if others think I’m good enough or not. Most of them are NPCs and everyone is the main character in their own life." }, { "title": "[Alexa Smart Food Scale] 00-Design and Implementation of a Voice Scale", "url": "/posts/projects-page/", "categories": "Side Projects, Smart Food Scale", "tags": "IOT, Smart Home, Raspberry Pi, Alexa, AWS", "date": "2022-11-09 17:00:00 +0100", "snippet": "Smart Kitchen device - VoiScaleDo you keep a daily log of what you eat and how much you eat each day? Are you tracking progress toward your nutrition, fitness, weight loss and water goals? If that’s yes, then how?Get food weight - pick up your phone - open the app - select object - check its calorie - etc. BUT all of these operations can be done by just telling Alexa, what it is you are going to eat or drink!Goal: It’s all about releasing your hands and saving your time!With my VoiScale: “Alexa, open Smart Scale to record my diet” “It’s a Banana”, “Brocollie”, “Huhu, I get Chicken Chest” “I’ve got Whey Protein” “Alexa, show my history data in the past week” “Alexa, recommend me a recipe”Tell and go! That’s it! Then food weight is recorded, nutrition facts are displayed on your screen, such as Echo Show. Later on, you can review your daily log, set your goal, track your progress all by speaking to Alexa." }, { "title": "[Linux Driver Development] LDD Reading: Ch.3 Char Drivers", "url": "/posts/ldd-ch3/", "categories": "Course Notes, Linux Driver", "tags": "Linux Driver, Device Driver, Char Drivers", "date": "2022-11-09 17:00:00 +0100", "snippet": "Chapter 3 Char DriversChar drivers, block drivers, network drivers, the goal of this part is to understand and write a complete char device driver. The first step of driver writing is defining the capabilities the driver will offer to user programs.1. Data structuresMost of the fundamental driver operations involve three important kernel structures, called file_operations, file, and inode. We’ll take a quick look at each of them.File OperationsWe have some device numbers for our use, file_operations would connect any of our driver’s operations to those numbers. Each open file, represented by a file structure, is associated with its own set of functions(f_op pointing to a file_operations structure). These operations are mostly in charge of implementing the system calls and are therefore, named open, read, and so on. Book example for scull device driver:struct file_operations scull_fops = { .owner = THIS_MODULE, .llseek = scull_llseek, .read = scull_read, .write = scull_write, .ioctl = scull_ioctl, .open = scull_open, .release = scull_release,};File structureA struct file is a kernel structure that never appears in user programs. The file structure represents an open file. It is created by the kernel on open and is passed to any function that operates on the file, until the last close. Notice, in the kernel sources, file refers to the structure and filp to a pointer to the structure. inode structureThe inode structure is used by the kernel internally to represent files. Thus it is different from the file structure that represents an open file discriptor. There can be multiple file structures representing multiple open descriptors on a single file, but they all point to a single inode structure. As illustrated in this figure, cited from here, we will come back to this topic later when it comes to Unix File Systems design. The inode structure contains a great deal of information about the file. Only two fields of this structure are of concerns for writing driver code: dev_t i_rdev; For inode that represents device files, this field contains the actual device number. struct cdev *i_cdev; struct cdev represents char devices in kernel.2. Char Device RegistrationBefore the kernel invokes your device’s operations, you must allocate and register one or more of these structures. To obtain a standalone cdev structure at runtime, we can do this: struct cdev *my_cdev = cdev_alloc( );my_cdev-&gt;ops = &amp;my_fops; If in a case that you want to embed the cdev structure within a device-specific structure of your own, you can use: void cdev_init(struct cdev *cdev, struct file_operations *fops);int cdev_add(struct cdev *dev, dev_t num, unsigned int count); TBD: ch03 P56 Copyright: all contents are from Linux Device Driver3e(LDD)." }, { "title": "[Principles of Computer System] UNIX File System Layering and Naming", "url": "/posts/Unix-file-system/", "categories": "Course Notes, Principles of Computer System", "tags": "UNIX, Computer System, File System Design", "date": "2022-11-09 17:00:00 +0100", "snippet": "2.5 Case Study: UNIX FILE SYSTEM LAYERING AND NAMING" }, { "title": "[Linux Driver Development] LDD Reading: Ch.15 memory mapping and DMA", "url": "/posts/ldd-ch15/", "categories": "Course Notes, Linux Driver", "tags": "Linux Driver, Device Driver, DMA", "date": "2022-11-06 17:00:00 +0100", "snippet": "Chapter 15 Memory Mapping and DMAMemory mapping is one of the most interesting features of modern Unix systems. As far as drivers are concerned, memory mapping can be implemented to provide user programs with direct access to device memory.The mm_struct and vm_area_structVitrual memory area, aka. VMA, is the kernel data structure used to manage distinct regions of a process’s address space.When a user-space process calls mmap to map device memory into its address space, the system responds by creating a new VMA to represent that mapping. A driver that supports mmap needs to help that process by completing the initialization of that VMA. mmap Advantage: High throughput. For instance, X server, which transfers a lot of data to and from video memory; mapping the graphic display to user space dramatically improves the throughput, as opposed to an lseek/write operations. And, for PCI device. Most PCI periperals map their control registers to a memory address, and a high-performance applciation might prefer to have direct access to the registers instead of repeatedly having to call ioctl to get its work done.Page size granularity: The limitation of mmap is that the mapping is PAGE_SIZE grained; therefore, the mapped area must be a multiple of PAGE_SIZE and must live in physical memory starting at an address that is a multiple of PAGE_SIZE.The mmap method is part of the file_operations structure and is invoked when the mmap system call is issued(Finally I figured haha). A struct Refresh from here(kernel 2.4.2): struct file_operations { struct module *owner; loff_t (*llseek) (struct file *, loff_t, int); ssize_t (*read) (struct file *, char *, size_t, loff_t *); ssize_t (*write) (struct file *, const char *, size_t, loff_t *); int (*readdir) (struct file *, void *, filldir_t); unsigned int (*poll) (struct file *, struct poll_table_struct *); int (*ioctl) (struct inode *, struct file *, unsigned int, unsigned long); int (*mmap) (struct file *filp, struct vm_area_struct *vma); int (*open) (struct inode *, struct file *); int (*flush) (struct file *); int (*release) (struct inode *, struct file *); int (*fsync) (struct file *, struct dentry *, int datasync); int (*fasync) (int, struct file *, int); int (*lock) (struct file *, int, struct file_lock *); \tssize_t (*readv) (struct file *, const struct iovec *, unsigned long, loff_t *); \tssize_t (*writev) (struct file *, const struct iovec *, unsigned long, loff_t *); };Copyright: all contents are from Linux Device Driver3e(LDD)." }, { "title": "[CSAPP] Chapter 2: Data Representation", "url": "/posts/ch2-csapp/", "categories": "Course Notes, CSAPP", "tags": "computer architecture", "date": "2022-11-06 17:00:00 +0100", "snippet": "0. Bit-Level Operations in CFor Practice Problem 2.13, we take advantage of this property: x ^ y = (x &amp; not(y)) | (not(x) &amp; y)1. Integer number1.1 Unsigned EncodingsFigure 2.12 shows the mapping, from bit vectors to ingeters.UMax = 2^w - 1 1.2 Two’s-Complement Encodings2. Float numberTBC. Copyright: all contents are from CS:APP3e." }, { "title": "[CSAPP] Chapter 3: Machine Level Representation", "url": "/posts/ch3-csapp/", "categories": "Course Notes, CSAPP", "tags": "computer architecture", "date": "2022-11-05 17:00:00 +0100", "snippet": "1. Machine codeGenerate assembly code mstore.s:$ gcc -Og -S mstore.cGenerate an object-code file mstore.o:$ gcc -Og -c mstore.cCheck byte-encoding instructions, disassembler:$ objdump -d mstore.oThe original 8086 had 16-bit registers, from %ax through %bp; with the extension to IA32, these registers were expanded to 32-bit registers, as labeled %eax through %ebp. For x86-64, they begin with %r.Data movement InstructionsData movement instruction has four variants, movb, movw, movl, movq, differing in their source and destination types, what conversions they perform, and other side effects they may have.Convension 1: x86-64 imposes the restriction that a move instruction cannot have both operands refer to memory location.Convension 2: For most cases, MOV will only update the specific register bytes or memory locations indicated by the destination operand. The only exception is that when movl has a register as the destination, it will also set the high-order 4 bytes of the register to 0.TBC. Copyright: all contents are from CS:APP3e." }, { "title": "[Nand to Tetris] 从0到1设计一台自己的计算机，最有趣的计算机系统课！", "url": "/posts/course-into/", "categories": "Course Notes, Nand2Tetris", "tags": "computer system, operating system, compiler, logic gates, Boolean algebra, 计算机系统", "date": "2022-05-14 08:00:00 +0200", "snippet": "相信非计算机软件科班出身（我自己），但仍然因为热爱而从事计算机软件开发尤其是偏底层的嵌入式软件开发的同学们，在工作中随着技术领域的深入，或多或少都能体会到如果没有一个完整的计算机知识体系作为支撑， 很多技术细节总是有一种知其然但不知其所以然的感觉。Fig.1 - Imagine a world without StackOverflow (image courtesy) Build your Knowledge Tree Elon Musk在一次访谈中被问到“How do you learn so much so fast? ”，他是这样说的： \"It is important to view knowledge as sort of a semantic tree — make sure you understand the fundamental principles, i.e. the trunk and big branches, before you get into the leaves/details or there is nothing for them to hang on to. \" Fig.2 - Build your knowledge tree (image courtesy) 那对我们来说，这些知识的主干就是像计算机体系结构，组成原理，操作系统，编译原理，计算机网络等这些核心的计算机基础知识。北美很多名校的公开课比如麻省理工的6.S081，6.004, 斯坦福的CS110, CS107, CS144这些课程的质量都很棒，视频课件公开，只要一个一个课程作业及实验课跟着做完（我还没有），就能建立起完整的计算机领域的知识体系。但今天要讲的是另外一门神奇的课程Nand To Tetris 从与非门到俄罗斯方块。该课程从一个与非门开始，根据一套给定的简化指令集，构建一个完整的计算机 - HACK Computer, 并编写汇编器及编译器，最终用自己的一个编程语言(JACK)实现Tetris游戏。如课程教授所说， \"Nand to Tetris courses are not restricted to computer science majors. Rather, they lend themselves to learners from any discipline who seek to gain a hands-on understanding of hardware architectures, operating systems, compilation, and software engineering - all in one course! \" Lecture resources 这里是课程网站，需要的软件工具，硬件仿真(Hardware simulator, CPU emulator, VM emulator)，课程资料，技术手册都在这里。 Cool Stuff这里展示了一些非常有趣的个人项目，有人不满足于本课程的HDL语言与仿真平台，直接把HACK电脑用FPGA实现了！有人实现了不可思议的光纤追踪。 Fig.3 - Cool stuff (image courtesy) 你可能会问，\"Is it possible to cover so much ground in a one-semester course?\" 答案是肯定的，证明就是全球已经有超过150所大学开设这门课程，学生们的满意度超乎寻常，MOOC平台Coursera上的Nand to Tetris课程评分常年靠前。当然了，一个学期的课程涉及到计算机方方面面，广度自然牺牲掉了一部分深度。 Coursera课程分为上下两部分, 上部属于Hardware, 完成Hack Computer的搭建; 下部分属于Software，完成从虚拟机到操作系统，编译器汇编器，高级语言设计及最后游戏的编码。我在去年完成了这门课的上半部分，在享受造物乐趣的同时: 在仿真器里，用一个很简单的HDL硬件描述语言，从一个门电路开始到最终完成所有模块的构建, Multiplexer, Demultiplexer, Register, RAM, ALU, CPU, 一步一步学习了解到了计算机的工作原理，so there is no magic!Nand to Tetris Part INand to Tetris Part IILet’s fully understand what’s going on inside computers, and find the beauty of the picture at large!Fig.4 - Create then Understand 如作者所讲，通过这样一门综合全面的计算机系统课，我们可以避免只见树木不见森林的情况。头脑中建立起计算机系统的全貌，之后再有的放矢的加强领域知识学习效果会更好。 \"We wrote this book because we felt that many computer science students are missing the forest for the trees. We believe that the best way to understand how computers work is to build one from scratch. \" Learning Roadmap 整个课程，正如路线图所展示的，总共需要完成12个硬件与软件构建任务。P1-P6完成HACK Computer(A simple but sufficiently powerful computer system)硬件的搭建；P7-P12完成从虚拟机，编译器，到操作系统的搭建。硬件部分路线图Fig.5- Roadmap on hardware (image courtesy)软件部分路线图Fig.6 - Roadmap on software (image courtesy) 具体来说，通过12个项目，我们将完成以下的主题学习： Hardware: 布尔代数，组合逻辑电路，时序逻辑电路，各种逻辑门电路的实现，复用器，触发器，寄存器，RAM，计数器，硬件描述语言，芯片功能仿真验证与测试 Architecture: ALU/CPU的设计与实现，时钟周期，寻址模式，取指与执行，指令集，内存映射的输入输出 Low-level languages: 设计与实现一套简单的机器语言，指令集，汇编语言，汇编器 Virtual machines: 自动机，堆栈设计，函数调用与返回，递归的处理，设计与实现一个简单的虚拟机语言 High-level languages: 设计与实现一个简单的面向对象，与Java类似的编程语言，包括抽象数据类型，类，构造体，函数方法，语法语义，作用域，引用 Compilers: 词法分析，符号表，代码产生，数组与对象的实现，分层编译 Programming: 完成汇编器，虚拟机，编译器，API的设计 Operating systems: 内存管理，数学计算库，输入输出设备的驱动，字符串处理，文本输出，图形输出，高级语言支持 Data structure and algorithms: 栈，哈希表，链表，树，代数与几何算法，实时性考量 Software engineering: 模块化设计， 接口与实现范式，API设计，写文档，单元测试，测试规范，软件质量，复杂系统设计 从第一原理出发，通过仔细的推理和模块化规划，我们将从零到一搭建一台现代计算机系统， 在这个过程中我们也将学习到如何有效地规划和管理大型硬件和软件开发项目。Start the journey 前几天，在亚马逊上看到了这门课配套书的第二版(2021)，马上下了单。估计中文版一时半会儿出不来。我会把读书和学习的过程分享在这个博客上，大家共同学习进步！Fig.7 - The Elements of Computing Systems \"If you’ll manage to complete the journey, you will gain an excellent basis for becoming a hardcore computer professional yourself!\" 与君共勉" }, { "title": "[mit6.004] Part 1: Instruction Set Architectures", "url": "/posts/test-page/", "categories": "Course Notes, MIT6.004", "tags": "computer architecture", "date": "2022-05-06 16:00:00 +0200", "snippet": "A test pageThis is a titleHi, there!" } ]
